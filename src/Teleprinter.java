import java.awt.*;import java.awt.image.BufferedImage;import java.util.*;import java.util.List;/** *  This class implments a scrolling text area display that tries to emulate the look of a teleprinter *  that uses colored, pin feed paper. * * @author Wayne Holder */class Teleprinter extends Canvas {	private Font			    tFont;	private	FontMetrics 	fMt;	private int 					tAscent;	private int						width = 0;	private int 					height = 0;	private int 					lines;	private int 					scrollDist;	private int 					coff;	private int 					textWidth;	private String[]			lineBuf = null;	private int						cursor = 0;	private BufferedImage img;	private Graphics2D		offscr;	private final List<String>  saveText = new ArrayList<>();	private	Color					lGreen = new Color(194,255,239);	private	Color					dGreen = new Color(70,196,162);			Teleprinter (String font, int size) {		tFont = new Font(font, Font.PLAIN, size);	}		public void paint (Graphics g) {		Dimension dim = getSize();		if (width != dim.width  ||  height != dim.height) {			width = dim.width;			height = dim.height;			fMt = getFontMetrics(tFont);			int tHeight = fMt.getHeight();			tAscent =  fMt.getAscent();			int tLeading = fMt.getLeading();			int tCharWidth = fMt.getMaxAdvance();			scrollDist = tHeight + tLeading;			lines = (height - scrollDist) / scrollDist;			int columns = (width - tCharWidth) / tCharWidth;			coff = (height - (lines * scrollDist)) >> 1;			textWidth = columns * tCharWidth;			// Create offscreen buffer <width> pixels wide and <height> pixels tall			img = new BufferedImage(dim.width, dim.height, BufferedImage.TYPE_INT_RGB);			offscr = img.createGraphics();			offscr.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);			offscr.setFont(tFont);			// Allocate array for lines of test			lineBuf = new String[lines + 1];		}    // Pack lines into width allowed by current window size    int lineCount = 0;    synchronized (saveText) {      for (String txt : saveText) {        StringTokenizer tokens = new StringTokenizer(txt);        StringBuilder line = new StringBuilder();        while (tokens.hasMoreTokens()) {          String tok = tokens.nextToken();          if (fMt.stringWidth(line + tok + " ") <= textWidth) {            line.append(tok).append(" ");          } else {            lineBuf[cursor] = line.toString();            cursor = (cursor + 1) % lines;            line = new StringBuilder(tok + " ");            lineCount++;          }        }        lineBuf[cursor] = line.toString();        cursor = (cursor + 1) % lines;        lineCount++;      }    }    // Draw striped teleprinter paper    for (int ii = -1; ii < (lines + 1); ii++) {      offscr.setColor(((ii + cursor) & 2) == 0 ? lGreen : Color.white);      offscr.fillRect(0, ii * scrollDist + coff, width, scrollDist);      if (((ii + cursor) & 1) == 0) {        offscr.setColor(dGreen);        offscr.fillRect(0, ii * scrollDist + coff, width, 1);      }    }    offscr.setColor(Color.black);    // Redraw text lines    for (int ii = 0; ii < lines; ii++) {      int index = (ii + cursor) % lines;      if (lineBuf[index] != null && ii >= (lines - lineCount)) {        offscr.drawString(lineBuf[index], 10, ii * scrollDist + tAscent + coff);      }    }    // Copy composite offscreen buffer to screen			g.drawImage(img, 0, 0, this);	}	public void update (Graphics g) {		paint(g);	}	void setText (String txt) {    synchronized (saveText) {      saveText.add(txt);      repaint();    }	}}